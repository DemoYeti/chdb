name: Build

on: [push, pull_request]

jobs:
  build_wheels_linux:
    name: Build on ${{ matrix.os }} py${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-20.04 ]
        python-version: [ "3.7", "3.8", "3.9", "3.10", "3.11"]
        # python-version: [ "3.7" ]
    env:
      RUNNER_OS: ${{ matrix.os }}
      PYTHON_VERSION: ${{ matrix.python-version }}
    steps:
      - name: Install python
        uses: actions/setup-python@v4
        with:
          python-version: "${{ matrix.python-version }}"
      - name: Install clang++ for Ubuntu
        if: matrix.os == 'ubuntu-20.04'
        run: |
          pwd
          uname -a
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh 15
          which clang++-15
          clang++-15 --version
          sudo apt-get install -y make cmake ccache ninja-build yasm gawk
          ccache -s
      - name: Update git
        run: |
          sudo add-apt-repository ppa:git-core/ppa -y
          sudo apt-get update
          sudo apt-get install -y git
          git --version
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Restore submodules cache
        uses: actions/cache/restore@v3
        id: cache
        with:
          path: |
            contrib/**
          key: |
            submodule-${{ hashFiles('.gitmodules') }}
      - name: Update submodules if cache miss
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          git submodule update --init --recursive --jobs 4
      - name: Save submodules cache
        if: steps.cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v3
        with:
          path: |
            contrib/**
          key: |
            submodule-${{ hashFiles('.gitmodules') }}
      - name: ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ matrix.os }}
          max-size: 5G
      - name: remove old clang and link clang-15 to clang
        if: matrix.os == 'ubuntu-20.04'
        run: |
          sudo rm /usr/bin/clang
          sudo ln -s /usr/bin/clang-15 /usr/bin/clang
          sudo rm /usr/bin/clang++
          sudo ln -s /usr/bin/clang++-15 /usr/bin/clang++
          which clang++
          clang++ --version
      - name: Prepare chdb/build.sh
        run: |
          python3 -m pip install pybind11
          export CC=/usr/bin/clang
          export CXX=/usr/bin/clang++
          bash ./chdb/build.sh
          bash ./chdb/test_smoke.sh
        continue-on-error: false
      - name: Check ccache statistics
        run: |
          ccache -s
          ls -lh chdb
          df -h
      - name: Install dependencies for building wheels
        run: python3 -m pip install pip tox pybind11 twine
      - name: Build wheels
        run: |
          export CC=/usr/bin/clang
          export CXX=/usr/bin/clang++
          make wheel
      - name: Show files
        run: ls -lh dist
        shell: bash
      - uses: actions/upload-artifact@v3
        with:
          path: ./dist/*.whl
      - name: Upload pypi
        run: |
          python3 -m pip install twine
          python3 -m twine upload dist/*.whl
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}

  build_wheels_macos:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ macos-11, macos-12 ]
        # python-version: [ "3.7", "3.8", "3.9", "3.10", "3.11"]
        python-version: [ "3.7" ]
    env:
      RUNNER_OS: ${{ matrix.os }}
      PYTHON_VERSION: ${{ matrix.python-version }}
    steps:
      - name: Install clang++ for macOS
        if: matrix.os == 'macos-11' || matrix.os == 'macos-12'
        run: |
          pwd
          uname -a
          brew update
          brew install git ccache cmake ninja libtool gettext llvm gcc binutils grep findutils
          export PATH=$(brew --prefix llvm)/bin:$PATH
          which clang++
          clang++ --version
          ccache -s
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Restore submodules cache
        uses: actions/cache/restore@v3
        id: cache
        with:
          path: |
            contrib/**
          key: |
            submodule-${{ hashFiles('.gitmodules') }}
      - name: Update submodules if cache miss
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          git submodule update --init --recursive --jobs 4
      # - name: Save submodules cache
      #   uses: actions/cache/save@v3
      #   with:
      #     path: |
      #       contrib/**
      #     key: |
      #       submodule-${{ hashFiles('.gitmodules') }}
      - name: ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ matrix.os }}
          max-size: 5G
      - name: Prepare chdb/build.sh
        run: |
          python3 -m pip install pybind11
          export PATH=$(brew --prefix llvm)/bin:/usr/local/opt/grep/libexec/gnubin:/usr/local/opt/binutils/bin:$PATH:/usr/local/opt/findutils/libexec/gnubin
          export CC=$(brew --prefix llvm)/bin/clang
          export CXX=$(brew --prefix llvm)/bin/clang++ 
          bash ./chdb/build.sh
        continue-on-error: false
      - name: Check ccache statistics
        run: |
          ccache -s
          ls -lh chdb
          df -h
        env:
          CIBW_ENVIRONMENT_MACOS: "PATH=$(brew --prefix llvm)/bin:/usr/local/opt/grep/libexec/gnubin:/usr/local/opt/binutils/bin:$PATH:/usr/local/opt/findutils/libexec/gnubin \
             CC=$(brew --prefix llvm)/bin/clang CXX=$(brew --prefix llvm)/bin/clang++"
      - name: Remove /usr/local/bin/python3
        run: |
          sudo rm -f /usr/local/bin/python3
      - name: Install dependencies for building wheels
        run: python3 -m pip install pip tox pybind11 twine
      - name: Build wheels
        run: python3 -m cibuildwheel --output-dir wheelhouse
        env:
          CIBW_ENVIRONMENT_MACOS: "PATH=$(brew --prefix llvm)/bin:/usr/local/opt/grep/libexec/gnubin:/usr/local/opt/binutils/bin:$PATH:/usr/local/opt/findutils/libexec/gnubin \
             CC=$(brew --prefix llvm)/bin/clang CXX=$(brew --prefix llvm)/bin/clang++"
          CIBW_DEBUG: 1
          CIBW_BEFORE_BUILD: "pip install -U pip tox pybind11 && bash gen_manifest.sh"
          CIBW_BUILD_VERBOSITY: 3
          CIBW_BUILD: "cp37-macosx_x86_64 cp38-macosx_x86_64 cp39-macosx_x86_64 cp310-macosx_x86_64 cp311-macosx_x86_64"
          CIBW_TEST_COMMAND: python -c "import chdb; res = chdb.query('select 1112222222,555', 'CSV'); print(res.get_memview().tobytes())"
        # with:
        #   package-dir: .
        #   output-dir: wheelhouse
        #   config-file: "{package}/pyproject.toml"
      - name: Build wheels for macos12 including universal2
        if: matrix.os == 'macos-12'
        run: |
          python3 -m cibuildwheel --output-dir wheelhouse
        env:
          CIBW_ENVIRONMENT_MACOS: "PATH=$(brew --prefix llvm)/bin:/usr/local/opt/grep/libexec/gnubin:/usr/local/opt/binutils/bin:$PATH:/usr/local/opt/findutils/libexec/gnubin \
             CC=$(brew --prefix llvm)/bin/clang CXX=$(brew --prefix llvm)/bin/clang++"
          CIBW_DEBUG: 1
          CIBW_BEFORE_BUILD: "pip install -U pip tox"
          CIBW_BUILD_VERBOSITY: 3
          CIBW_BUILD: "cp37-macosx_x86_64 cp38-macosx_x86_64 cp39-macosx_x86_64 cp310-macosx_x86_64 cp311-macosx_x86_64 \
             cp37-macosx_arm64 cp38-macosx_arm64 cp39-macosx_arm64 cp310-macosx_arm64 cp311-macosx_arm64 \
             cp37-macosx_universal2 cp38-macosx_universal2 cp39-macosx_universal2 cp310-macosx_universal2 cp311-macosx_universal2"
          CIBW_TEST_COMMAND: python -c "import chdb; res = chdb.query('select 1112222222,555', 'CSV'); print(res.get_memview().tobytes())"
      - name: Run simple test
        run: |
          python3 -m pip install wheelhouse/*.whl
          python3 -c "import chdb; res = chdb.query('select 1112222222,555', 'CSV'); print(res.get_memview().tobytes())"
        continue-on-error: false
      - name: Show files
        run: ls -lh wheelhouse
        shell: bash
      - uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl
      - name: Upload pypi
        run: |
          python3 -m pip install twine
          python3 -m twine upload wheelhouse/*.whl
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
